import subprocess, os
import numpy as np
import pandas as pd
import tensorflow as tf
import tensorflow_decision_forests as tfdf
from flask import Flask, request, jsonify


app = Flask(__name__)

#특정 URL 경로에 대한 요청을 처리 -> '/' 는 루트 URL을 의미하며
# '/' 에 대한 요청이 들어오면 test1() 함수가 실행
@app.route('/analyze', methods=['POST'])
def analyze_apk():
    # 클라이언트로부터 전송된 .apk 파일을 저장할 경로 설정
    upload_folder ='/home/team/cap'
    if not os.path.exists(upload_folder):
        os.makedirs(upload_folder)
    
    ##### 폴더에 있는 학습된 모델 압축 해제 경로 설정 #####
    model_folder = upload_folder + '/model'
    if not os.path.exists(model_folder):
        os.makedirs(model_folder)
        terminal = f"unzip -qq '{upload_folder}/model.zip' -d '{model_folder}'"
        result = subprocess.run(terminal, shell = True)

     
    apk_file =request.files['apk']
    apk_path = os.path.join(upload_folder, apk_file.filename)
    apk_file.save(apk_path)
   
    # Dex 파일 분석을 위해 dexdump 도구 실행
    dexdump_output = subprocess.check_output(['dexdump', '-f', apk_path]).decode('utf-8')
    # AAPT를 사용하여 애플리케이션의 권한 및 API 정보 추출
    aapt_output = subprocess.check_output(['aapt', 'd', 'permissions', apk_path]).decode('utf-8')
    


##### 여기서부터 벡터테이블 만들고 예측하는 코드 #####

    with open(upload_folder + '/1848_api.txt') as f:
        api_1848 = f.read().split('/n')
    with open(upload_folder + '/530_perm.txt') as f:
        perm_530 = f.read().split('/n')

    api_dict = dict((a, i) for i, a in enumerate(api_1848))
    perm_dict = dict((p, i) for i, p in enumerate(perm_530))

    api_list = [0]*1848
    for api in dexdump_output:
        if api in api_1848:
            api_list[api_dict[api]]=1

    api = pd.DataFrame([api_list])

    perm_list = [0]*530
    for line in aapt_output:
        if "'" in line:
            perm = line.split("'")[1]
        elif "name=" in line:
            perm = line.split("name=")[1]
        else:
            perm = line.split()[1]

        if perm in perm_530:
            perm_list[perm_dict[perm]]=1

    perm = pd.DataFrame([perm_list])

    df = pd.concat([api, perm], axis = 1)
    df.columns = [str(i) for i in range(2378)]
    df = pd.DataFrame(df.loc[0].apply(str)).T
    df = tfdf.keras.pd_dataframe_to_tf_dataset(df)
    saved_model = tf.keras.models.load_model(model_folder)
    y_pred = saved_model.predict(df)

    probability =  y_pred[0][0]
    if probability >= 0.5 : is_malicious = 1

##### 여기까지 #####

    result = {
        'is_malicious': is_malicious,
        'probability': probability
    }

    return jsonify({'result': result})
   
if __name__ =='__main__':
   app.run(debug=True)

