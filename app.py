import subprocess, os
import numpy as np
import pandas as pd
import tensorflow as tf
import tensorflow_decision_forests as tfdf
import json
from flask import Flask, request, jsonify
from tensorflow.python.client import device_lib

os.environ["CUDA_VISIBLE_DEVICES"] = "-1"
print(device_lib.list_local_devices())


app = Flask(__name__)

app.config['MAX_CONTENT_LENGTH']=None

@app.route('/model', methods=['POST'])
def model_ready():
    global saved_model, api_1848, perm_530, perm_dict, api_dict
    
    saved_model = tf.keras.models.load_model("/home/project/model/model")
    with open('/home/project/1848_api.txt') as f:
        api_1848 = f.read().split('\n')
    with open('/home/project/530_perm.txt') as f:
        perm_530 = f.read().split('\n')

    perm_dict=dict((p,i) for i, p in enumerate(perm_530))
    api_dict=dict((a,i) for i, a in enumerate(api_1848))

    return 'model ready'

@app.route('/down', methods=['POST'])
def down():

    global saved_model, api_1848, perm_530, perm_dict, api_dict

    apk_file = request.files['file']
    if apk_file.filename.endswith('.apk'):
        # Save the uploaded APK file
        apk_path = '/home/project/' + apk_file.filename
        apk_file.save(apk_path)

        # Extract dex file using dexdump
        # dex_path = '/home/project/' + apk_file.filename.split('.apk')[0] + '.dex'
        dexdump_command = f'dexdump -d {apk_path} | grep invoke- | cut -d "}}" -f 2 | cut -d " " -f 2 > api.txt'
        result_api = subprocess.run(dexdump_command, shell = True)

        # Extract application information using aapt
        # aapt_command = ['aapt', 'dump', 'permissions', apk_path]
        # aapt_output = subprocess.check_output(aapt_command, universal_newlines=True)
        permission_command = f'aapt d permissions {apk_path} > permission.txt'
        result_permission = subprocess.run(permission_command, shell = True)

        # Save the application information to a file
        #info_path = '/home/project/app_info.txt'
        #with open(info_path, 'w') as info_file:
        #    info_file.write(aapt_output)

        # 벡터테이블 만들기
        api_list = [0]*1848
        with open(f'api.txt', 'r') as f:
            api =f.read().split("\n")[1:-1]
        for a in api:
            if a in api_1848:
                api_list[api_dict[a]]=1
    
        api = pd.DataFrame([api_list])
        api.to_csv("api_preprocessed.csv")

        perm_list = [0]*530
        with open(f'permission.txt', 'r') as f:
            permission =f.read().split('\n')[1:-1]

        for line in permission:
            # 노이즈 제거
            if "'" in line:
                perm = line.split("'")[1]
            elif 'name=' in line:
                perm = line.split("name=")[1]
            else:
                perm = line.split()[1]
            # 벡터테이블 생성
            if perm in perm_530:
                perm_list[perm_dict[perm]]=1
        perm =  pd.DataFrame([perm_list])
        perm .to_csv("perm_preprocessed.csv")

        df = pd.concat([api, perm], axis = 1)
        df.columns = [str(i) for i in range(2378)]
        df = pd.DataFrame(df.loc[0].apply(str)).T
        df = tfdf.keras.pd_dataframe_to_tf_dataset(df)
        y_pred = saved_model.predict(df)
        
        probability =  y_pred[0][0]
        p = str(probability*100)
        file=open('/home/project/test.txt','w')
        file.write(p)
        file.close()

       
        #if probability >= 0.5 : is_malicious = 1
        
        result = {
        'probability': p #probability
        }
        
        
        return jsonify(result)
    
    else:
        return 'Invalid file format'

   
@app.route('/')
def test():
   return 'hello'


@app.route('/test', methods=['POST'])
def upload_text():
   f=request.files['file']
   f.save(f.filename)
   
   result = {
      "probability" : "Asd"   
   }
   
   return jsonify(result)
   
   
if __name__ =='__main__':
   app.run(host='0.0.0.0',port='5000',debug=True)